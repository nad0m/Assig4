
// Assignment 4: Barcode
// Name: Huy Nguyen, Wissawakon Sriwarom, Keith Groves

public class Assig4
{

   public static void main(String[] args)
   {
      String[] sImageIn =
      { "                                               ",
         "                                               ",
         "                                               ",
         "     * * * * * * * * * * * * * * * * * * * * * ",
         "     *                                       * ",
         "     ****** **** ****** ******* ** *** *****   ",
         "     *     *    ****************************** ",
         "     * **    * *        **  *    * * *   *     ",
         "     *   *    *  *****    *   * *   *  **  *** ",
         "     *  **     * *** **   **  *    **  ***  *  ",
         "     ***  * **   **  *   ****    *  *  ** * ** ",
         "     *****  ***  *  * *   ** ** **  *   * *    ",
         "     ***************************************** ",
         "                                               ",
         "                                               ",
         "                                               "

      };
      

      String[] sImageIn_2 =
      { "                                          ",
         "                                          ",
         "* * * * * * * * * * * * * * * * * * *     ",
         "*                                    *    ",
         "**** *** **   ***** ****   *********      ",
         "* ************ ************ **********    ",
         "** *      *    *  * * *         * *       ",
         "***   *  *           * **    *      **    ",
         "* ** * *  *   * * * **  *   ***   ***     ",
         "* *           **    *****  *   **   **    ",
         "****  *  * *  * **  ** *   ** *  * *      ",
         "**************************************    ",
         "                                          ",
         "                                          ",
         "                                          ",
         "                                          "

      };

      BarcodeImage bc = new BarcodeImage(sImageIn);
      DataMatrix dm = new DataMatrix(bc);

      // First secret message
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // second secret message
      bc = new BarcodeImage(sImageIn_2);
      dm.scan(bc);
      dm.translateImageToText();
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // create your own message
      dm.readText("What a great resume builder this is!");
      dm.generateImageFromText();
      System.out.println("Extra Test:");
      dm.displayTextToConsole();
      dm.displayImageToConsole();

      // more test
      dm.translateImageToText();
      dm.displayTextToConsole();

   }
}
/**
 * 
 */

/**
 * @author BigMac
 *
 */
interface BarcodeIO 
{
   public boolean scan(BarcodeImage bc);
   public boolean readText(String text);
   public boolean generateImageFromText();
   public boolean translateImageToText();
   public void displayTextToConsole();
   public void displayImageToConsole();
}


/**
 * The BarcodeImage class contains valid barcode image data. It implements Clonable. 
 *
 */
class BarcodeImage implements Cloneable {
   public static final int MAX_HEIGHT = 30;
   public static final int MAX_WIDTH = 65;

   private boolean[][] image_data;

   /**
    * Default constructor that generates a blank 2D array based on the constant
    * dimensions MAX_WIDTH x MAX_HEIGHT.
    */
   public BarcodeImage() {
      this.image_data = new boolean[MAX_HEIGHT][MAX_WIDTH];
      // Generating blank 2D array
      clearImage();
   }

   /**
    * A constructor that takes a 1D array of Strings and converts it to the
    * internal 2D array of booleans.
    * 
    * @param str_data
    */
   public BarcodeImage(String[] str_data) {
      this.image_data = new boolean[MAX_HEIGHT][MAX_WIDTH];
      if (checkSize(str_data)) {
         int lineNumber = str_data.length - 1;

         // begin at bottom left corner
         for (int i = MAX_HEIGHT - 1; i >= 0; i--) {
            for (int j = 0; j < MAX_WIDTH; j++) {
               if (j < str_data[lineNumber].length() && lineNumber >= 0) {
                  if (str_data[lineNumber].charAt(j) == ' ') {
                     setPixel(i, j, false);
                  } else {
                     setPixel(i, j, true);
                  }
               } else {
                  setPixel(i, j, false);
               }
            }

            if (lineNumber > 0) {
               lineNumber--;
            }
         }
      }

   }

   /**
    * sets the pixel at the specified row and column to the specified value.
    * 
    * @param row
    * @param col
    * @param value
    * @return
    */
   public boolean setPixel(int row, int col, boolean value) {
      if ((row < 0 || row >= MAX_HEIGHT) || (col < 0 || col >= MAX_WIDTH)) {
         return false;
      }
      this.image_data[row][col] = value;
      return true;
   }

   /**
    * accesses individual pixel
    * 
    * @param row
    * @param col
    * @return
    */
   public boolean getPixel(int row, int col) {
      if ((row >= 0 && row < MAX_HEIGHT) && (col >= 0 && col < MAX_WIDTH)) {
         return this.image_data[row][col];
      } else {
         return false;
      }

   }

   /**
    * Overrides Cloneable interface method and returns copy of BarcodeImage
    * 
    */
   public Object clone() {
      BarcodeImage duplicate = null;
      try {
         duplicate = (BarcodeImage) super.clone();
         duplicate.image_data = (boolean[][]) image_data.clone();
      } catch (CloneNotSupportedException e) {
      }
      return duplicate;
   }

   /**
    * Displays the original string in 2D format to console. (For debugging)
    * 
    */
   public void displayToConsole() {
      for (int i = 0; i < MAX_HEIGHT; i++) {
         for (int j = 0; j < MAX_WIDTH; j++) {
            if (image_data[i][j]) {
               System.out.print('*');
            } else {
               System.out.print(' ');
            }
         }
         System.out.print("\n");
      }
   }

   /**
    * initializes a blanks image
    */
   private void clearImage() {
      for (int i = 0; i < MAX_HEIGHT; i++) {
         for (int j = 0; j < MAX_WIDTH; j++) {
            image_data[i][j] = false;
         }
      }
   }

   /**
    * checks that the data is valid
    * 
    * @param data
    * @return true if data is valid, otherwise false
    */
   private boolean checkSize(String[] data) {
      if (data != null) {
         if (data.length > MAX_HEIGHT) {
            return false;
         } else {
            for (int i = 0; i < data.length; i++) {
               if (data[i] != null) {
                  if (data[i].length() > MAX_WIDTH) {
                     return false;
                  }
               } else {
                  return false;
               }

            }
         }
      } else {
         return false;
      }
      return true;
   }
}


/**
 * The DataMatrix class contains a BarcodeImage and a text string for the encoded message. 
 *
 */
class DataMatrix implements BarcodeIO
{
   public static final char BLACK_CHAR = '*';
   public static final char WHITE_CHAR = ' ';

   private BarcodeImage image;
   private String text;
   private int actualHeight;
   private int actualWidth;

   /**
    * Default constructor that initializes all variables and creates an empty
    * image.
    * 
    */
   DataMatrix()
   {
      this.image = new BarcodeImage();
      this.text = "";
      this.actualWidth = 0;
      this.actualHeight = 0;
   }

   /**
    * A constructor that scans an image.
    * 
    */
   DataMatrix(BarcodeImage image)
   {
      scan(image);
   }

   /**
    * A constructor that reads given text input.
    * 
    * @param text
    */
   DataMatrix(String text)
   {
      this();
      this.readText(text);
   }

   /**
    * Public method that creates a clone of the image and then "cleans" it.
    * Actual height and width of the barcode are also initialized.
    * 
    */
   public boolean scan(BarcodeImage barcode)
   {
      try
      {
         image = (BarcodeImage) barcode.clone();
         cleanImage();
         actualHeight = computeSignalHeight();
         actualWidth = computeSignalWidth();

      } catch (Exception e)
      {
         return false;
      }

      return true;
   }

   /**
    * Private method that guarantees any input image to be packed into the
    * bottom-left corner.
    * 
    */
   private void cleanImage()
   {
      boolean found = false;
      int heightOffset = 0;
      int widthOffset = 0;

      for (int i = BarcodeImage.MAX_HEIGHT - 1; i >= 0; i--)
      {
         for (int j = 0; j < BarcodeImage.MAX_WIDTH; j++)
         {
            if (image.getPixel(i, j) && found == false)
            {
               found = true;
               heightOffset = BarcodeImage.MAX_HEIGHT - 1 - i;
               widthOffset = j;
            }

            if (image.getPixel(i, j) && found)
            {
               movePixelToLowerLeft(i, j, heightOffset, widthOffset);
            }
         }
      }

   }

   /**
    * Translates the current pxel to the lower left.
    * 
    * @param row
    * @param col
    * @param heightOffset
    * @param widthOffset
    */
   private void movePixelToLowerLeft(int row, int col, int heightOffset,
      int widthOffset)
   {
      // turns current pixel "off"
      image.setPixel(row, col, false);

      // move pixel to bottom-left based on offset values
      image.setPixel(row + heightOffset, col - widthOffset, true);
   }

   /**
    * Computes the signal height
    * 
    * @return
    */
   private int computeSignalHeight()
   {
      int height = 0;

      for (int i = BarcodeImage.MAX_HEIGHT - 1; i >= 0; i--)
      {
         if (image.getPixel(i, 0))
         {
            height++;
         }
      }
      return height;
   }

   /**
    * Computes the signal Width
    * 
    * @return
    */
   private int computeSignalWidth()
   {
      int j = 0;
      for (j = 0; j < BarcodeImage.MAX_WIDTH; j++)
      {
         if (image.getPixel(BarcodeImage.MAX_HEIGHT - 1, j) == false)
         {
            return j;
         }
      }
      return j;
   }

   /**
    * returns the actualHeight
    * 
    * @return the height of the data.
    */
   public int getActualHeight()
   {
      return actualHeight;
   }

   /**
    * returns the width of the data.
    * 
    * @return actual data width
    */
   public int getActualWidth()
   {
      return actualWidth;
   }

   /**
    * Displays the image to console.
    */
   public void displayImageToConsole()
   {
      horizontalLines();

      for (int i = BarcodeImage.MAX_HEIGHT
         - actualHeight; i < BarcodeImage.MAX_HEIGHT; i++)
      {
         printValues(i);

         System.out.print("\n");
      }

   }

   /**
    * Prints the values in a row.
    * 
    * @param row
    *           to be printed
    */
   private void printValues(int row)
   {
      for (int j = 0; j <= actualWidth; j++)
      {
         if (j == 0)
         {
            System.out.print("|");
         } else if (j == actualWidth)
         {
            System.out.print("|");
         }

         if (image.getPixel(row, j))
         {
            System.out.print(BLACK_CHAR);
         } else
         {
            System.out.print(WHITE_CHAR);
         }
      }
   }

   /**
    * Public method that computes the barcode and save it into text string.
    * 
    */
   public boolean translateImageToText()
   {
      text = "";

      if (image == null)
      {
         return false;
      }

      for (int i = 1; i < actualWidth - 1; i++)
      {
         text += (char) getASCII(i);
      }

      return true;
   }

   /**
    * returns the asci value of this column
    * @param col
    * @return
    */
   private int getASCII(int col)
   {
      int sum = 0;
      int exponent = 0;

      for (int j = BarcodeImage.MAX_HEIGHT - 2; j > BarcodeImage.MAX_HEIGHT
         - actualHeight; j--, exponent++)
      {
         if (image.getPixel(j, col))
         {
            sum += (int) Math.pow(2, exponent);
         }
      }
      return sum;
   }

   /**
    * displays the text message.
    */
   public void displayTextToConsole()
   {
      System.out.println(text);
   }

   /**
    * creates horizontal borders.
    */
   private void horizontalLines()
   {
      for (int i = 0; i < actualWidth + 2; i++)
      {
         System.out.print("-");
      }
      System.out.print("\n");
   }

   /**
    * sets the text to be translated.
    */
   public boolean readText(String text)
   {
      this.text = text;
      this.image = new BarcodeImage();
      actualWidth = text.length() + 2;
      actualHeight = 10;
      return this.text == text;
   }

   /**
    * creates an image from the text
    */
   public boolean generateImageFromText()
   {
      creatLimitationLines();
      for (int col = 1; col < text.length() + 1; col++)
      {
         writeCharToCol(col);
      }
      return scan(image);
   }

   /**
    * method to set the pixels of the image.
    * 
    * @param col
    */
   private void writeCharToCol(int col)
   {
      int charToConvert = (int) text.charAt(col - 1);
      for (int row = 8; row > 0; row--)
      {
         // Check if bit is set.
         if ((charToConvert & 1) == 1)
         {
            image.setPixel(row, col, true);
         } else
         {
            image.setPixel(row, col, false);
         }
         // shift bits
         charToConvert >>= 1;
      }
   }

   /**
    * creates the Closed Limitation Lines and Open border Lines
    */
   private void creatLimitationLines()
   {
      for (int row = 9; row >= 0; row--)
      {
         if (row == 9 || row == 0)
         {
            createHorizontalLimitLine(row);
         }
         createVerticalLimitationMark(row);
      }
   }

   /**
    * creates the horizontal Open Borderline and Closed Limitation Line
    * 
    * @param row
    */
   private void createHorizontalLimitLine(int row)
   {
      for (int col = 0; col < text.length() + 1; col++)
      {
         if (row == 9 || (row == 0 && col % 2 == 0))
         {
            image.setPixel(row, col, true);
         }
      }

   }

   /**
    * marks a point on the Vertical Limitation line and Open Border Line
    * 
    * @param row
    */
   private void createVerticalLimitationMark(int row)
   {
      image.setPixel(row, 0, true);
      if (row % 2 == 1)
      {
         image.setPixel(row, text.length() + 1, true);

      }
   }
}
/*
CSUMB CSIT online program is top notch.
-------------------------------------------
|* * * * * * * * * * * * * * * * * * * * *| 
|*                                       *| 
|****** **** ****** ******* ** *** *****  | 
|*     *    ******************************| 
|* **    * *        **  *    * * *   *    | 
|*   *    *  *****    *   * *   *  **  ***| 
|*  **     * *** **   **  *    **  ***  * | 
|***  * **   **  *   ****    *  *  ** * **| 
|*****  ***  *  * *   ** ** **  *   * *   | 
|*****************************************| 
You did it!  Great work.  Celebrate.
----------------------------------------
|* * * * * * * * * * * * * * * * * * * | 
|*                                    *| 
|**** *** **   ***** ****   *********  | 
|* ************ ************ **********| 
|** *      *    *  * * *         * *   | 
|***   *  *           * **    *      **| 
|* ** * *  *   * * * **  *   ***   *** | 
|* *           **    *****  *   **   **| 
|****  *  * *  * **  ** *   ** *  * *  | 
|**************************************| 
step 2:
What a great resume builder this is!
----------------------------------------
|* * * * * * * * * * * * * * * * * * * | 
|*                                    *| 
|***** * ***** ****** ******* **** **  | 
|* ************************************| 
|**  *    *  * * **    *    * *  *  *  | 
|* *               *    **     **  *  *| 
|**  *   * * *  * ***  * ***  *        | 
|**      **    * *    *     *    *  * *| 
|** *  * * **   *****  **  *    ** *** | 
|**************************************| 
What a great resume builder this is!

*/
